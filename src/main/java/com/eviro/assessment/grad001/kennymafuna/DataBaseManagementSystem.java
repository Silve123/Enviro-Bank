package com.eviro.assessment.grad001.kennymafuna;

import com.eviro.assessment.grad001.kennymafuna.fileParser.CSVFileParser;

import java.io.File;
import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;
import java.sql.*;


public class DataBaseManagementSystem {
    public static class DatabaseConnection {
        private static final String DB_URL = "jdbc:h2:mem:test;DB_CLOSE_DELAY=-1";
        private static final String DB_USER = "sa";
        private static final String DB_PASSWORD = "";

        public static Connection getConnection() throws SQLException {
            return DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
        }
    }

    public void createTables(Connection connection) throws SQLException {
        try (Statement statement = connection.createStatement()) {
            statement.execute("CREATE TABLE IF NOT EXISTS User (" +
                    "USERID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                    "name VARCHAR(255), " +
                    "surname VARCHAR(255), " +
                    "age INT, " +
                    "address VARCHAR(255), " +
                    "phone VARCHAR(20), " +
                    "email VARCHAR(255))");

            statement.execute("CREATE TABLE IF NOT EXISTS Product (" +
                    "PRODUCTID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                    "type VARCHAR(50), " +
                    "name VARCHAR(255), " +
                    "balance DOUBLE)");

            statement.execute("CREATE TABLE IF NOT EXISTS Investment (" +
                    "investmentId INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                    "USERID INT, " +
                    "PRODUCTID INT, " +
                    "FOREIGN KEY (USERID) REFERENCES User(USERID), " +
                    "FOREIGN KEY (PRODUCTID) REFERENCES Product(PRODUCTID))");

            statement.execute("CREATE TABLE IF NOT EXISTS WithdrawalNotice (" +
                    "withdrawalNoticeId INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                    "PRODUCTID INT, " +
                    "FOREIGN KEY (PRODUCTID) REFERENCES Product(PRODUCTID))");
        }
    }

    public void insertIntoTable(Connection connection, List<?> entries, String tableName) throws SQLException {
        String insertSql = generateInsertSql(tableName, entries.get(0).getClass().getDeclaredFields(), true);
        try (PreparedStatement preparedStatement = connection.prepareStatement(insertSql, Statement.RETURN_GENERATED_KEYS)) {
            for (Object entry : entries) {
                int parameterIndex = 1;
                Field[] fields = entry.getClass().getDeclaredFields();
                for (int i = 1; i < fields.length; i++) {
                    fields[i].setAccessible(true);
                    Object value = fields[i].get(entry);
                    preparedStatement.setObject(parameterIndex++, value);
                }

                preparedStatement.addBatch();

            }

            preparedStatement.executeBatch();
        } catch (IllegalAccessException e) {
            throw new RuntimeException(e);
        }
    }


    private String generateInsertSql(String tableName, Field[] fields, boolean excludeUserId) {
        StringBuilder sqlBuilder = new StringBuilder("INSERT INTO ").append(tableName).append(" (");

        int startIndex = excludeUserId ? 1 : 0;

        for (int i = startIndex; i < fields.length; i++) {
            sqlBuilder.append(fields[i].getName()).append(", ");
        }


        sqlBuilder.replace(sqlBuilder.length() - 2, sqlBuilder.length(), ") VALUES (");

        for (int i = startIndex; i < fields.length; i++) {
            sqlBuilder.append("?, ");
        }

        sqlBuilder.replace(sqlBuilder.length() - 2, sqlBuilder.length(), ")");
        return sqlBuilder.toString();
    }

    public void createAndPopulateTables() {
        try (Connection connection = DatabaseConnection.getConnection()) {
            DataBaseManagementSystem tableManagement = this;
            CSVFileParser csvFileParser = new CSVFileParser();

            // Create tables
            tableManagement.createTables(connection);

            // Parse and insert data into tables
            csvFileParser.parseUserCSV(new File("users.csv"));
            tableManagement.insertIntoTable(connection, csvFileParser.users, "User");
            System.out.println("Created and Populated User Table");

            csvFileParser.parseProductsCSV(new File("products.csv"));
            tableManagement.insertIntoTable(connection, csvFileParser.products, "Product");
            System.out.println("Created and Populated Product Table");


            csvFileParser.parseInvestmentCSV(new File("investments.csv"));
            tableManagement.insertIntoTable(connection, csvFileParser.investments, "Investment");
            System.out.println("Created and Populated Investment Table");
            System.out.println("Created and Populated Withdrawal Notice Table");

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
